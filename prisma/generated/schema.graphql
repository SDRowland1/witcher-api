### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Book {
  author: String!
  id: ID!
  pages: Int!
  publicationDate: String!
  publisher: String!
  title: String!
  type: String!
}

input BookCreateInput {
  author: String!
  id: ID
  pages: Int!
  publicationDate: String!
  publisher: String!
  title: String!
  type: String!
}

input BookCreateManyInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateInput!]
}

enum BookOrderByInput {
  author_ASC
  author_DESC
  id_ASC
  id_DESC
  pages_ASC
  pages_DESC
  publicationDate_ASC
  publicationDate_DESC
  publisher_ASC
  publisher_DESC
  title_ASC
  title_DESC
  type_ASC
  type_DESC
}

input BookWhereInput {
  AND: [BookWhereInput!]
  author: String
  author_contains: String
  author_ends_with: String
  author_gt: String
  author_gte: String
  author_in: [String!]
  author_lt: String
  author_lte: String
  author_not: String
  author_not_contains: String
  author_not_ends_with: String
  author_not_in: [String!]
  author_not_starts_with: String
  author_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  pages: Int
  pages_gt: Int
  pages_gte: Int
  pages_in: [Int!]
  pages_lt: Int
  pages_lte: Int
  pages_not: Int
  pages_not_in: [Int!]
  publicationDate: String
  publicationDate_contains: String
  publicationDate_ends_with: String
  publicationDate_gt: String
  publicationDate_gte: String
  publicationDate_in: [String!]
  publicationDate_lt: String
  publicationDate_lte: String
  publicationDate_not: String
  publicationDate_not_contains: String
  publicationDate_not_ends_with: String
  publicationDate_not_in: [String!]
  publicationDate_not_starts_with: String
  publicationDate_starts_with: String
  publisher: String
  publisher_contains: String
  publisher_ends_with: String
  publisher_gt: String
  publisher_gte: String
  publisher_in: [String!]
  publisher_lt: String
  publisher_lte: String
  publisher_not: String
  publisher_not_contains: String
  publisher_not_ends_with: String
  publisher_not_in: [String!]
  publisher_not_starts_with: String
  publisher_starts_with: String
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  type: String
  type_contains: String
  type_ends_with: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_ends_with: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_starts_with: String
}

input BookWhereUniqueInput {
  id: ID
}

type Character {
  affiliations: String!
  bookAppearences(after: String, before: String, first: Int, last: Int, orderBy: BookOrderByInput, skip: Int, where: BookWhereInput): [Book!]
  gameAppearences(after: String, before: String, first: Int, last: Int, orderBy: GameOrderByInput, skip: Int, where: GameWhereInput): [Game!]
  id: ID!
  name: String!
  profession: String!
  race: String!
  region: String!
}

input CharacterCreateInput {
  affiliations: String!
  bookAppearences: BookCreateManyInput
  gameAppearences: GameCreateManyInput
  id: ID
  name: String!
  profession: String!
  race: String!
  region: String!
}

enum CharacterOrderByInput {
  affiliations_ASC
  affiliations_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  profession_ASC
  profession_DESC
  race_ASC
  race_DESC
  region_ASC
  region_DESC
}

input CharacterWhereInput {
  affiliations: String
  affiliations_contains: String
  affiliations_ends_with: String
  affiliations_gt: String
  affiliations_gte: String
  affiliations_in: [String!]
  affiliations_lt: String
  affiliations_lte: String
  affiliations_not: String
  affiliations_not_contains: String
  affiliations_not_ends_with: String
  affiliations_not_in: [String!]
  affiliations_not_starts_with: String
  affiliations_starts_with: String
  AND: [CharacterWhereInput!]
  bookAppearences_some: BookWhereInput
  gameAppearences_some: GameWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  profession: String
  profession_contains: String
  profession_ends_with: String
  profession_gt: String
  profession_gte: String
  profession_in: [String!]
  profession_lt: String
  profession_lte: String
  profession_not: String
  profession_not_contains: String
  profession_not_ends_with: String
  profession_not_in: [String!]
  profession_not_starts_with: String
  profession_starts_with: String
  race: String
  race_contains: String
  race_ends_with: String
  race_gt: String
  race_gte: String
  race_in: [String!]
  race_lt: String
  race_lte: String
  race_not: String
  race_not_contains: String
  race_not_ends_with: String
  race_not_in: [String!]
  race_not_starts_with: String
  race_starts_with: String
  region: String
  region_contains: String
  region_ends_with: String
  region_gt: String
  region_gte: String
  region_in: [String!]
  region_lt: String
  region_lte: String
  region_not: String
  region_not_contains: String
  region_not_ends_with: String
  region_not_in: [String!]
  region_not_starts_with: String
  region_starts_with: String
}

input CharacterWhereUniqueInput {
  id: ID
}

type Game {
  developer: String!
  genres: [String!]!
  id: ID!
  platforms: [String!]!
  publisher: String!
  releaseDate: String!
  title: String!
  website: String!
}

input GameCreategenresInput {
  set: [String!]
}

input GameCreateInput {
  developer: String!
  genres: GameCreategenresInput
  id: ID
  platforms: GameCreateplatformsInput
  publisher: String!
  releaseDate: String!
  title: String!
  website: String!
}

input GameCreateManyInput {
  connect: [GameWhereUniqueInput!]
  create: [GameCreateInput!]
}

input GameCreateplatformsInput {
  set: [String!]
}

enum GameOrderByInput {
  developer_ASC
  developer_DESC
  id_ASC
  id_DESC
  publisher_ASC
  publisher_DESC
  releaseDate_ASC
  releaseDate_DESC
  title_ASC
  title_DESC
  website_ASC
  website_DESC
}

input GameWhereInput {
  AND: [GameWhereInput!]
  developer: String
  developer_contains: String
  developer_ends_with: String
  developer_gt: String
  developer_gte: String
  developer_in: [String!]
  developer_lt: String
  developer_lte: String
  developer_not: String
  developer_not_contains: String
  developer_not_ends_with: String
  developer_not_in: [String!]
  developer_not_starts_with: String
  developer_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  publisher: String
  publisher_contains: String
  publisher_ends_with: String
  publisher_gt: String
  publisher_gte: String
  publisher_in: [String!]
  publisher_lt: String
  publisher_lte: String
  publisher_not: String
  publisher_not_contains: String
  publisher_not_ends_with: String
  publisher_not_in: [String!]
  publisher_not_starts_with: String
  publisher_starts_with: String
  releaseDate: String
  releaseDate_contains: String
  releaseDate_ends_with: String
  releaseDate_gt: String
  releaseDate_gte: String
  releaseDate_in: [String!]
  releaseDate_lt: String
  releaseDate_lte: String
  releaseDate_not: String
  releaseDate_not_contains: String
  releaseDate_not_ends_with: String
  releaseDate_not_in: [String!]
  releaseDate_not_starts_with: String
  releaseDate_starts_with: String
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  website: String
  website_contains: String
  website_ends_with: String
  website_gt: String
  website_gte: String
  website_in: [String!]
  website_lt: String
  website_lte: String
  website_not: String
  website_not_contains: String
  website_not_ends_with: String
  website_not_in: [String!]
  website_not_starts_with: String
  website_starts_with: String
}

input GameWhereUniqueInput {
  id: ID
}

type Mutation {
  createBook(data: BookCreateInput!): Book!
  createCharacter(data: CharacterCreateInput!): Character!
  createGame(data: GameCreateInput!): Game!
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(after: String, before: String, first: Int, last: Int, orderBy: BookOrderByInput, skip: Int, where: BookWhereInput): [Book!]!
  character(where: CharacterWhereUniqueInput!): Character
  characters(after: String, before: String, first: Int, last: Int, orderBy: CharacterOrderByInput, skip: Int, where: CharacterWhereInput): [Character!]!
  game(where: GameWhereUniqueInput!): Game
  games(after: String, before: String, first: Int, last: Int, orderBy: GameOrderByInput, skip: Int, where: GameWhereInput): [Game!]!
}
