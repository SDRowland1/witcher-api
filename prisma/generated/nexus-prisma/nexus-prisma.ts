/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Character: CharacterObject
      Game: GameObject
      Book: BookObject
      CharacterConnection: CharacterConnectionObject
      PageInfo: PageInfoObject
      CharacterEdge: CharacterEdgeObject
      AggregateCharacter: AggregateCharacterObject
      GameConnection: GameConnectionObject
      GameEdge: GameEdgeObject
      AggregateGame: AggregateGameObject
      BookConnection: BookConnectionObject
      BookEdge: BookEdgeObject
      AggregateBook: AggregateBookObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      CharacterSubscriptionPayload: CharacterSubscriptionPayloadObject
      CharacterPreviousValues: CharacterPreviousValuesObject
      GameSubscriptionPayload: GameSubscriptionPayloadObject
      GamePreviousValues: GamePreviousValuesObject
      BookSubscriptionPayload: BookSubscriptionPayloadObject
      BookPreviousValues: BookPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Character: CharacterFieldDetails
      Game: GameFieldDetails
      Book: BookFieldDetails
      CharacterConnection: CharacterConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      CharacterEdge: CharacterEdgeFieldDetails
      AggregateCharacter: AggregateCharacterFieldDetails
      GameConnection: GameConnectionFieldDetails
      GameEdge: GameEdgeFieldDetails
      AggregateGame: AggregateGameFieldDetails
      BookConnection: BookConnectionFieldDetails
      BookEdge: BookEdgeFieldDetails
      AggregateBook: AggregateBookFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      CharacterSubscriptionPayload: CharacterSubscriptionPayloadFieldDetails
      CharacterPreviousValues: CharacterPreviousValuesFieldDetails
      GameSubscriptionPayload: GameSubscriptionPayloadFieldDetails
      GamePreviousValues: GamePreviousValuesFieldDetails
      BookSubscriptionPayload: BookSubscriptionPayloadFieldDetails
      BookPreviousValues: BookPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      CharacterWhereUniqueInput: CharacterWhereUniqueInputInputObject
      GameWhereInput: GameWhereInputInputObject
      BookWhereInput: BookWhereInputInputObject
      CharacterWhereInput: CharacterWhereInputInputObject
      GameWhereUniqueInput: GameWhereUniqueInputInputObject
      BookWhereUniqueInput: BookWhereUniqueInputInputObject
      CharacterCreateInput: CharacterCreateInputInputObject
      GameCreateManyInput: GameCreateManyInputInputObject
      GameCreateInput: GameCreateInputInputObject
      GameCreateplatformsInput: GameCreateplatformsInputInputObject
      GameCreategenresInput: GameCreategenresInputInputObject
      BookCreateManyInput: BookCreateManyInputInputObject
      BookCreateInput: BookCreateInputInputObject
      CharacterUpdateInput: CharacterUpdateInputInputObject
      GameUpdateManyInput: GameUpdateManyInputInputObject
      GameUpdateWithWhereUniqueNestedInput: GameUpdateWithWhereUniqueNestedInputInputObject
      GameUpdateDataInput: GameUpdateDataInputInputObject
      GameUpdateplatformsInput: GameUpdateplatformsInputInputObject
      GameUpdategenresInput: GameUpdategenresInputInputObject
      GameUpsertWithWhereUniqueNestedInput: GameUpsertWithWhereUniqueNestedInputInputObject
      GameScalarWhereInput: GameScalarWhereInputInputObject
      GameUpdateManyWithWhereNestedInput: GameUpdateManyWithWhereNestedInputInputObject
      GameUpdateManyDataInput: GameUpdateManyDataInputInputObject
      BookUpdateManyInput: BookUpdateManyInputInputObject
      BookUpdateWithWhereUniqueNestedInput: BookUpdateWithWhereUniqueNestedInputInputObject
      BookUpdateDataInput: BookUpdateDataInputInputObject
      BookUpsertWithWhereUniqueNestedInput: BookUpsertWithWhereUniqueNestedInputInputObject
      BookScalarWhereInput: BookScalarWhereInputInputObject
      BookUpdateManyWithWhereNestedInput: BookUpdateManyWithWhereNestedInputInputObject
      BookUpdateManyDataInput: BookUpdateManyDataInputInputObject
      CharacterUpdateManyMutationInput: CharacterUpdateManyMutationInputInputObject
      GameUpdateInput: GameUpdateInputInputObject
      GameUpdateManyMutationInput: GameUpdateManyMutationInputInputObject
      BookUpdateInput: BookUpdateInputInputObject
      BookUpdateManyMutationInput: BookUpdateManyMutationInputInputObject
      CharacterSubscriptionWhereInput: CharacterSubscriptionWhereInputInputObject
      GameSubscriptionWhereInput: GameSubscriptionWhereInputInputObject
      BookSubscriptionWhereInput: BookSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    GameOrderByInput: GameOrderByInputValues,
    BookOrderByInput: BookOrderByInputValues,
    CharacterOrderByInput: CharacterOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'character', args?: QueryCharacterArgs[] | false, alias?: string  } 
  | { name: 'characters', args?: QueryCharactersArgs[] | false, alias?: string  } 
  | { name: 'charactersConnection', args?: QueryCharactersConnectionArgs[] | false, alias?: string  } 
  | { name: 'game', args?: QueryGameArgs[] | false, alias?: string  } 
  | { name: 'games', args?: QueryGamesArgs[] | false, alias?: string  } 
  | { name: 'gamesConnection', args?: QueryGamesConnectionArgs[] | false, alias?: string  } 
  | { name: 'book', args?: QueryBookArgs[] | false, alias?: string  } 
  | { name: 'books', args?: QueryBooksArgs[] | false, alias?: string  } 
  | { name: 'booksConnection', args?: QueryBooksConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'character'
  | 'characters'
  | 'charactersConnection'
  | 'game'
  | 'games'
  | 'gamesConnection'
  | 'book'
  | 'books'
  | 'booksConnection'


type QueryCharacterArgs =
  | 'where'
type QueryCharactersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCharactersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGameArgs =
  | 'where'
type QueryGamesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGamesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBookArgs =
  | 'where'
type QueryBooksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBooksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  character: {
    type: 'Character'
    args: Record<QueryCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  characters: {
    type: 'Character'
    args: Record<QueryCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CharacterWhereInput | null, orderBy?: prisma.CharacterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character[]> | prisma.Character[]
  }
  charactersConnection: {
    type: 'CharacterConnection'
    args: Record<QueryCharactersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CharacterWhereInput | null, orderBy?: prisma.CharacterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterConnection> | prisma.CharacterConnection
  }
  game: {
    type: 'Game'
    args: Record<QueryGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game | null> | prisma.Game | null
  }
  games: {
    type: 'Game'
    args: Record<QueryGamesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GameWhereInput | null, orderBy?: prisma.GameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game[]> | prisma.Game[]
  }
  gamesConnection: {
    type: 'GameConnection'
    args: Record<QueryGamesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GameWhereInput | null, orderBy?: prisma.GameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GameConnection> | prisma.GameConnection
  }
  book: {
    type: 'Book'
    args: Record<QueryBookArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BookWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book | null> | prisma.Book | null
  }
  books: {
    type: 'Book'
    args: Record<QueryBooksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BookWhereInput | null, orderBy?: prisma.BookOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book[]> | prisma.Book[]
  }
  booksConnection: {
    type: 'BookConnection'
    args: Record<QueryBooksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BookWhereInput | null, orderBy?: prisma.BookOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BookConnection> | prisma.BookConnection
  }
}
  

// Types for Character

type CharacterObject =
  | CharacterFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'race', args?: [] | false, alias?: string  } 
  | { name: 'profession', args?: [] | false, alias?: string  } 
  | { name: 'affiliations', args?: [] | false, alias?: string  } 
  | { name: 'region', args?: [] | false, alias?: string  } 
  | { name: 'gameAppearences', args?: CharacterGameAppearencesArgs[] | false, alias?: string  } 
  | { name: 'bookAppearences', args?: CharacterBookAppearencesArgs[] | false, alias?: string  } 

type CharacterFields =
  | 'id'
  | 'name'
  | 'race'
  | 'profession'
  | 'affiliations'
  | 'region'
  | 'gameAppearences'
  | 'bookAppearences'


type CharacterGameAppearencesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type CharacterBookAppearencesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CharacterFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  race: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profession: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  affiliations: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  region: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  gameAppearences: {
    type: 'Game'
    args: Record<CharacterGameAppearencesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Character">,
      args: { where?: GameWhereInput | null, orderBy?: prisma.GameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game[]> | prisma.Game[]
  }
  bookAppearences: {
    type: 'Book'
    args: Record<CharacterBookAppearencesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Character">,
      args: { where?: BookWhereInput | null, orderBy?: prisma.BookOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book[]> | prisma.Book[]
  }
}
  

// Types for Game

type GameObject =
  | GameFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'platforms', args?: [] | false, alias?: string  } 
  | { name: 'genres', args?: [] | false, alias?: string  } 
  | { name: 'releaseDate', args?: [] | false, alias?: string  } 
  | { name: 'publisher', args?: [] | false, alias?: string  } 
  | { name: 'developer', args?: [] | false, alias?: string  } 
  | { name: 'website', args?: [] | false, alias?: string  } 

type GameFields =
  | 'id'
  | 'title'
  | 'platforms'
  | 'genres'
  | 'releaseDate'
  | 'publisher'
  | 'developer'
  | 'website'



  

export interface GameFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  platforms: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  genres: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  releaseDate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publisher: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  developer: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  website: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Book

type BookObject =
  | BookFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'publisher', args?: [] | false, alias?: string  } 
  | { name: 'publicationDate', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'pages', args?: [] | false, alias?: string  } 

type BookFields =
  | 'id'
  | 'title'
  | 'author'
  | 'publisher'
  | 'publicationDate'
  | 'type'
  | 'pages'



  

export interface BookFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publisher: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publicationDate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pages: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CharacterConnection

type CharacterConnectionObject =
  | CharacterConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CharacterConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CharacterConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CharacterEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterEdge[]> | prisma.CharacterEdge[]
  }
  aggregate: {
    type: 'AggregateCharacter'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCharacter> | prisma.AggregateCharacter
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CharacterEdge

type CharacterEdgeObject =
  | CharacterEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CharacterEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CharacterEdgeFieldDetails {
  node: {
    type: 'Character'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCharacter

type AggregateCharacterObject =
  | AggregateCharacterFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCharacterFields =
  | 'count'



  

export interface AggregateCharacterFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GameConnection

type GameConnectionObject =
  | GameConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GameConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GameConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GameEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GameEdge[]> | prisma.GameEdge[]
  }
  aggregate: {
    type: 'AggregateGame'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGame> | prisma.AggregateGame
  }
}
  

// Types for GameEdge

type GameEdgeObject =
  | GameEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GameEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GameEdgeFieldDetails {
  node: {
    type: 'Game'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GameEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game> | prisma.Game
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGame

type AggregateGameObject =
  | AggregateGameFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGameFields =
  | 'count'



  

export interface AggregateGameFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BookConnection

type BookConnectionObject =
  | BookConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BookConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BookConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BookConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BookEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BookConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BookEdge[]> | prisma.BookEdge[]
  }
  aggregate: {
    type: 'AggregateBook'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BookConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBook> | prisma.AggregateBook
  }
}
  

// Types for BookEdge

type BookEdgeObject =
  | BookEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BookEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BookEdgeFieldDetails {
  node: {
    type: 'Book'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BookEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book> | prisma.Book
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBook

type AggregateBookObject =
  | AggregateBookFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBookFields =
  | 'count'



  

export interface AggregateBookFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createCharacter', args?: MutationCreateCharacterArgs[] | false, alias?: string  } 
  | { name: 'updateCharacter', args?: MutationUpdateCharacterArgs[] | false, alias?: string  } 
  | { name: 'updateManyCharacters', args?: MutationUpdateManyCharactersArgs[] | false, alias?: string  } 
  | { name: 'upsertCharacter', args?: MutationUpsertCharacterArgs[] | false, alias?: string  } 
  | { name: 'deleteCharacter', args?: MutationDeleteCharacterArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCharacters', args?: MutationDeleteManyCharactersArgs[] | false, alias?: string  } 
  | { name: 'createGame', args?: MutationCreateGameArgs[] | false, alias?: string  } 
  | { name: 'updateGame', args?: MutationUpdateGameArgs[] | false, alias?: string  } 
  | { name: 'updateManyGames', args?: MutationUpdateManyGamesArgs[] | false, alias?: string  } 
  | { name: 'upsertGame', args?: MutationUpsertGameArgs[] | false, alias?: string  } 
  | { name: 'deleteGame', args?: MutationDeleteGameArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGames', args?: MutationDeleteManyGamesArgs[] | false, alias?: string  } 
  | { name: 'createBook', args?: MutationCreateBookArgs[] | false, alias?: string  } 
  | { name: 'updateBook', args?: MutationUpdateBookArgs[] | false, alias?: string  } 
  | { name: 'updateManyBooks', args?: MutationUpdateManyBooksArgs[] | false, alias?: string  } 
  | { name: 'upsertBook', args?: MutationUpsertBookArgs[] | false, alias?: string  } 
  | { name: 'deleteBook', args?: MutationDeleteBookArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBooks', args?: MutationDeleteManyBooksArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createCharacter'
  | 'updateCharacter'
  | 'updateManyCharacters'
  | 'upsertCharacter'
  | 'deleteCharacter'
  | 'deleteManyCharacters'
  | 'createGame'
  | 'updateGame'
  | 'updateManyGames'
  | 'upsertGame'
  | 'deleteGame'
  | 'deleteManyGames'
  | 'createBook'
  | 'updateBook'
  | 'updateManyBooks'
  | 'upsertBook'
  | 'deleteBook'
  | 'deleteManyBooks'


type MutationCreateCharacterArgs =
  | 'data'
type MutationUpdateCharacterArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCharactersArgs =
  | 'data'
  | 'where'
type MutationUpsertCharacterArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCharacterArgs =
  | 'where'
type MutationDeleteManyCharactersArgs =
  | 'where'
type MutationCreateGameArgs =
  | 'data'
type MutationUpdateGameArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGamesArgs =
  | 'data'
  | 'where'
type MutationUpsertGameArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGameArgs =
  | 'where'
type MutationDeleteManyGamesArgs =
  | 'where'
type MutationCreateBookArgs =
  | 'data'
type MutationUpdateBookArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBooksArgs =
  | 'data'
  | 'where'
type MutationUpsertBookArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBookArgs =
  | 'where'
type MutationDeleteManyBooksArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createCharacter: {
    type: 'Character'
    args: Record<MutationCreateCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  updateCharacter: {
    type: 'Character'
    args: Record<MutationUpdateCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterUpdateInput, where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  updateManyCharacters: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CharacterUpdateManyMutationInput, where?: CharacterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCharacter: {
    type: 'Character'
    args: Record<MutationUpsertCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CharacterWhereUniqueInput, create: CharacterCreateInput, update: CharacterUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character> | prisma.Character
  }
  deleteCharacter: {
    type: 'Character'
    args: Record<MutationDeleteCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CharacterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  deleteManyCharacters: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCharactersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CharacterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGame: {
    type: 'Game'
    args: Record<MutationCreateGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GameCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game> | prisma.Game
  }
  updateGame: {
    type: 'Game'
    args: Record<MutationUpdateGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GameUpdateInput, where: GameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game | null> | prisma.Game | null
  }
  updateManyGames: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGamesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GameUpdateManyMutationInput, where?: GameWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGame: {
    type: 'Game'
    args: Record<MutationUpsertGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GameWhereUniqueInput, create: GameCreateInput, update: GameUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game> | prisma.Game
  }
  deleteGame: {
    type: 'Game'
    args: Record<MutationDeleteGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game | null> | prisma.Game | null
  }
  deleteManyGames: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGamesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GameWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBook: {
    type: 'Book'
    args: Record<MutationCreateBookArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BookCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book> | prisma.Book
  }
  updateBook: {
    type: 'Book'
    args: Record<MutationUpdateBookArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BookUpdateInput, where: BookWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book | null> | prisma.Book | null
  }
  updateManyBooks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBooksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BookUpdateManyMutationInput, where?: BookWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBook: {
    type: 'Book'
    args: Record<MutationUpsertBookArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BookWhereUniqueInput, create: BookCreateInput, update: BookUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book> | prisma.Book
  }
  deleteBook: {
    type: 'Book'
    args: Record<MutationDeleteBookArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BookWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book | null> | prisma.Book | null
  }
  deleteManyBooks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBooksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BookWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'character', args?: SubscriptionCharacterArgs[] | false, alias?: string  } 
  | { name: 'game', args?: SubscriptionGameArgs[] | false, alias?: string  } 
  | { name: 'book', args?: SubscriptionBookArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'character'
  | 'game'
  | 'book'


type SubscriptionCharacterArgs =
  | 'where'
type SubscriptionGameArgs =
  | 'where'
type SubscriptionBookArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  character: {
    type: 'CharacterSubscriptionPayload'
    args: Record<SubscriptionCharacterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CharacterSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterSubscriptionPayload | null> | prisma.CharacterSubscriptionPayload | null
  }
  game: {
    type: 'GameSubscriptionPayload'
    args: Record<SubscriptionGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GameSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GameSubscriptionPayload | null> | prisma.GameSubscriptionPayload | null
  }
  book: {
    type: 'BookSubscriptionPayload'
    args: Record<SubscriptionBookArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BookSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BookSubscriptionPayload | null> | prisma.BookSubscriptionPayload | null
  }
}
  

// Types for CharacterSubscriptionPayload

type CharacterSubscriptionPayloadObject =
  | CharacterSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CharacterSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CharacterSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Character'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Character | null> | prisma.Character | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CharacterPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CharacterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CharacterPreviousValues | null> | prisma.CharacterPreviousValues | null
  }
}
  

// Types for CharacterPreviousValues

type CharacterPreviousValuesObject =
  | CharacterPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'race', args?: [] | false, alias?: string  } 
  | { name: 'profession', args?: [] | false, alias?: string  } 
  | { name: 'affiliations', args?: [] | false, alias?: string  } 
  | { name: 'region', args?: [] | false, alias?: string  } 

type CharacterPreviousValuesFields =
  | 'id'
  | 'name'
  | 'race'
  | 'profession'
  | 'affiliations'
  | 'region'



  

export interface CharacterPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  race: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profession: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  affiliations: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  region: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GameSubscriptionPayload

type GameSubscriptionPayloadObject =
  | GameSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GameSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GameSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Game'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game | null> | prisma.Game | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GamePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GamePreviousValues | null> | prisma.GamePreviousValues | null
  }
}
  

// Types for GamePreviousValues

type GamePreviousValuesObject =
  | GamePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'platforms', args?: [] | false, alias?: string  } 
  | { name: 'genres', args?: [] | false, alias?: string  } 
  | { name: 'releaseDate', args?: [] | false, alias?: string  } 
  | { name: 'publisher', args?: [] | false, alias?: string  } 
  | { name: 'developer', args?: [] | false, alias?: string  } 
  | { name: 'website', args?: [] | false, alias?: string  } 

type GamePreviousValuesFields =
  | 'id'
  | 'title'
  | 'platforms'
  | 'genres'
  | 'releaseDate'
  | 'publisher'
  | 'developer'
  | 'website'



  

export interface GamePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  platforms: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  genres: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  releaseDate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publisher: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  developer: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  website: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BookSubscriptionPayload

type BookSubscriptionPayloadObject =
  | BookSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BookSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BookSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BookSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Book'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BookSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Book | null> | prisma.Book | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BookPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BookSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BookPreviousValues | null> | prisma.BookPreviousValues | null
  }
}
  

// Types for BookPreviousValues

type BookPreviousValuesObject =
  | BookPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'publisher', args?: [] | false, alias?: string  } 
  | { name: 'publicationDate', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'pages', args?: [] | false, alias?: string  } 

type BookPreviousValuesFields =
  | 'id'
  | 'title'
  | 'author'
  | 'publisher'
  | 'publicationDate'
  | 'type'
  | 'pages'



  

export interface BookPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publisher: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publicationDate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pages: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface CharacterWhereUniqueInput {
  id?: string | null
}
export type CharacterWhereUniqueInputInputObject =
  | Extract<keyof CharacterWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GameWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  releaseDate?: string | null
  releaseDate_not?: string | null
  releaseDate_in?: string[]
  releaseDate_not_in?: string[]
  releaseDate_lt?: string | null
  releaseDate_lte?: string | null
  releaseDate_gt?: string | null
  releaseDate_gte?: string | null
  releaseDate_contains?: string | null
  releaseDate_not_contains?: string | null
  releaseDate_starts_with?: string | null
  releaseDate_not_starts_with?: string | null
  releaseDate_ends_with?: string | null
  releaseDate_not_ends_with?: string | null
  publisher?: string | null
  publisher_not?: string | null
  publisher_in?: string[]
  publisher_not_in?: string[]
  publisher_lt?: string | null
  publisher_lte?: string | null
  publisher_gt?: string | null
  publisher_gte?: string | null
  publisher_contains?: string | null
  publisher_not_contains?: string | null
  publisher_starts_with?: string | null
  publisher_not_starts_with?: string | null
  publisher_ends_with?: string | null
  publisher_not_ends_with?: string | null
  developer?: string | null
  developer_not?: string | null
  developer_in?: string[]
  developer_not_in?: string[]
  developer_lt?: string | null
  developer_lte?: string | null
  developer_gt?: string | null
  developer_gte?: string | null
  developer_contains?: string | null
  developer_not_contains?: string | null
  developer_starts_with?: string | null
  developer_not_starts_with?: string | null
  developer_ends_with?: string | null
  developer_not_ends_with?: string | null
  website?: string | null
  website_not?: string | null
  website_in?: string[]
  website_not_in?: string[]
  website_lt?: string | null
  website_lte?: string | null
  website_gt?: string | null
  website_gte?: string | null
  website_contains?: string | null
  website_not_contains?: string | null
  website_starts_with?: string | null
  website_not_starts_with?: string | null
  website_ends_with?: string | null
  website_not_ends_with?: string | null
  AND?: GameWhereInput[]
}
export type GameWhereInputInputObject =
  | Extract<keyof GameWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  | { name: 'releaseDate_not', alias?: string  } 
  | { name: 'releaseDate_in', alias?: string  } 
  | { name: 'releaseDate_not_in', alias?: string  } 
  | { name: 'releaseDate_lt', alias?: string  } 
  | { name: 'releaseDate_lte', alias?: string  } 
  | { name: 'releaseDate_gt', alias?: string  } 
  | { name: 'releaseDate_gte', alias?: string  } 
  | { name: 'releaseDate_contains', alias?: string  } 
  | { name: 'releaseDate_not_contains', alias?: string  } 
  | { name: 'releaseDate_starts_with', alias?: string  } 
  | { name: 'releaseDate_not_starts_with', alias?: string  } 
  | { name: 'releaseDate_ends_with', alias?: string  } 
  | { name: 'releaseDate_not_ends_with', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publisher_not', alias?: string  } 
  | { name: 'publisher_in', alias?: string  } 
  | { name: 'publisher_not_in', alias?: string  } 
  | { name: 'publisher_lt', alias?: string  } 
  | { name: 'publisher_lte', alias?: string  } 
  | { name: 'publisher_gt', alias?: string  } 
  | { name: 'publisher_gte', alias?: string  } 
  | { name: 'publisher_contains', alias?: string  } 
  | { name: 'publisher_not_contains', alias?: string  } 
  | { name: 'publisher_starts_with', alias?: string  } 
  | { name: 'publisher_not_starts_with', alias?: string  } 
  | { name: 'publisher_ends_with', alias?: string  } 
  | { name: 'publisher_not_ends_with', alias?: string  } 
  | { name: 'developer', alias?: string  } 
  | { name: 'developer_not', alias?: string  } 
  | { name: 'developer_in', alias?: string  } 
  | { name: 'developer_not_in', alias?: string  } 
  | { name: 'developer_lt', alias?: string  } 
  | { name: 'developer_lte', alias?: string  } 
  | { name: 'developer_gt', alias?: string  } 
  | { name: 'developer_gte', alias?: string  } 
  | { name: 'developer_contains', alias?: string  } 
  | { name: 'developer_not_contains', alias?: string  } 
  | { name: 'developer_starts_with', alias?: string  } 
  | { name: 'developer_not_starts_with', alias?: string  } 
  | { name: 'developer_ends_with', alias?: string  } 
  | { name: 'developer_not_ends_with', alias?: string  } 
  | { name: 'website', alias?: string  } 
  | { name: 'website_not', alias?: string  } 
  | { name: 'website_in', alias?: string  } 
  | { name: 'website_not_in', alias?: string  } 
  | { name: 'website_lt', alias?: string  } 
  | { name: 'website_lte', alias?: string  } 
  | { name: 'website_gt', alias?: string  } 
  | { name: 'website_gte', alias?: string  } 
  | { name: 'website_contains', alias?: string  } 
  | { name: 'website_not_contains', alias?: string  } 
  | { name: 'website_starts_with', alias?: string  } 
  | { name: 'website_not_starts_with', alias?: string  } 
  | { name: 'website_ends_with', alias?: string  } 
  | { name: 'website_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface BookWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  author?: string | null
  author_not?: string | null
  author_in?: string[]
  author_not_in?: string[]
  author_lt?: string | null
  author_lte?: string | null
  author_gt?: string | null
  author_gte?: string | null
  author_contains?: string | null
  author_not_contains?: string | null
  author_starts_with?: string | null
  author_not_starts_with?: string | null
  author_ends_with?: string | null
  author_not_ends_with?: string | null
  publisher?: string | null
  publisher_not?: string | null
  publisher_in?: string[]
  publisher_not_in?: string[]
  publisher_lt?: string | null
  publisher_lte?: string | null
  publisher_gt?: string | null
  publisher_gte?: string | null
  publisher_contains?: string | null
  publisher_not_contains?: string | null
  publisher_starts_with?: string | null
  publisher_not_starts_with?: string | null
  publisher_ends_with?: string | null
  publisher_not_ends_with?: string | null
  publicationDate?: string | null
  publicationDate_not?: string | null
  publicationDate_in?: string[]
  publicationDate_not_in?: string[]
  publicationDate_lt?: string | null
  publicationDate_lte?: string | null
  publicationDate_gt?: string | null
  publicationDate_gte?: string | null
  publicationDate_contains?: string | null
  publicationDate_not_contains?: string | null
  publicationDate_starts_with?: string | null
  publicationDate_not_starts_with?: string | null
  publicationDate_ends_with?: string | null
  publicationDate_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  pages?: number | null
  pages_not?: number | null
  pages_in?: number[]
  pages_not_in?: number[]
  pages_lt?: number | null
  pages_lte?: number | null
  pages_gt?: number | null
  pages_gte?: number | null
  AND?: BookWhereInput[]
}
export type BookWhereInputInputObject =
  | Extract<keyof BookWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'author_not', alias?: string  } 
  | { name: 'author_in', alias?: string  } 
  | { name: 'author_not_in', alias?: string  } 
  | { name: 'author_lt', alias?: string  } 
  | { name: 'author_lte', alias?: string  } 
  | { name: 'author_gt', alias?: string  } 
  | { name: 'author_gte', alias?: string  } 
  | { name: 'author_contains', alias?: string  } 
  | { name: 'author_not_contains', alias?: string  } 
  | { name: 'author_starts_with', alias?: string  } 
  | { name: 'author_not_starts_with', alias?: string  } 
  | { name: 'author_ends_with', alias?: string  } 
  | { name: 'author_not_ends_with', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publisher_not', alias?: string  } 
  | { name: 'publisher_in', alias?: string  } 
  | { name: 'publisher_not_in', alias?: string  } 
  | { name: 'publisher_lt', alias?: string  } 
  | { name: 'publisher_lte', alias?: string  } 
  | { name: 'publisher_gt', alias?: string  } 
  | { name: 'publisher_gte', alias?: string  } 
  | { name: 'publisher_contains', alias?: string  } 
  | { name: 'publisher_not_contains', alias?: string  } 
  | { name: 'publisher_starts_with', alias?: string  } 
  | { name: 'publisher_not_starts_with', alias?: string  } 
  | { name: 'publisher_ends_with', alias?: string  } 
  | { name: 'publisher_not_ends_with', alias?: string  } 
  | { name: 'publicationDate', alias?: string  } 
  | { name: 'publicationDate_not', alias?: string  } 
  | { name: 'publicationDate_in', alias?: string  } 
  | { name: 'publicationDate_not_in', alias?: string  } 
  | { name: 'publicationDate_lt', alias?: string  } 
  | { name: 'publicationDate_lte', alias?: string  } 
  | { name: 'publicationDate_gt', alias?: string  } 
  | { name: 'publicationDate_gte', alias?: string  } 
  | { name: 'publicationDate_contains', alias?: string  } 
  | { name: 'publicationDate_not_contains', alias?: string  } 
  | { name: 'publicationDate_starts_with', alias?: string  } 
  | { name: 'publicationDate_not_starts_with', alias?: string  } 
  | { name: 'publicationDate_ends_with', alias?: string  } 
  | { name: 'publicationDate_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'pages', alias?: string  } 
  | { name: 'pages_not', alias?: string  } 
  | { name: 'pages_in', alias?: string  } 
  | { name: 'pages_not_in', alias?: string  } 
  | { name: 'pages_lt', alias?: string  } 
  | { name: 'pages_lte', alias?: string  } 
  | { name: 'pages_gt', alias?: string  } 
  | { name: 'pages_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CharacterWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  race?: string | null
  race_not?: string | null
  race_in?: string[]
  race_not_in?: string[]
  race_lt?: string | null
  race_lte?: string | null
  race_gt?: string | null
  race_gte?: string | null
  race_contains?: string | null
  race_not_contains?: string | null
  race_starts_with?: string | null
  race_not_starts_with?: string | null
  race_ends_with?: string | null
  race_not_ends_with?: string | null
  profession?: string | null
  profession_not?: string | null
  profession_in?: string[]
  profession_not_in?: string[]
  profession_lt?: string | null
  profession_lte?: string | null
  profession_gt?: string | null
  profession_gte?: string | null
  profession_contains?: string | null
  profession_not_contains?: string | null
  profession_starts_with?: string | null
  profession_not_starts_with?: string | null
  profession_ends_with?: string | null
  profession_not_ends_with?: string | null
  affiliations?: string | null
  affiliations_not?: string | null
  affiliations_in?: string[]
  affiliations_not_in?: string[]
  affiliations_lt?: string | null
  affiliations_lte?: string | null
  affiliations_gt?: string | null
  affiliations_gte?: string | null
  affiliations_contains?: string | null
  affiliations_not_contains?: string | null
  affiliations_starts_with?: string | null
  affiliations_not_starts_with?: string | null
  affiliations_ends_with?: string | null
  affiliations_not_ends_with?: string | null
  region?: string | null
  region_not?: string | null
  region_in?: string[]
  region_not_in?: string[]
  region_lt?: string | null
  region_lte?: string | null
  region_gt?: string | null
  region_gte?: string | null
  region_contains?: string | null
  region_not_contains?: string | null
  region_starts_with?: string | null
  region_not_starts_with?: string | null
  region_ends_with?: string | null
  region_not_ends_with?: string | null
  gameAppearences_some?: GameWhereInput | null
  bookAppearences_some?: BookWhereInput | null
  AND?: CharacterWhereInput[]
}
export type CharacterWhereInputInputObject =
  | Extract<keyof CharacterWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'race', alias?: string  } 
  | { name: 'race_not', alias?: string  } 
  | { name: 'race_in', alias?: string  } 
  | { name: 'race_not_in', alias?: string  } 
  | { name: 'race_lt', alias?: string  } 
  | { name: 'race_lte', alias?: string  } 
  | { name: 'race_gt', alias?: string  } 
  | { name: 'race_gte', alias?: string  } 
  | { name: 'race_contains', alias?: string  } 
  | { name: 'race_not_contains', alias?: string  } 
  | { name: 'race_starts_with', alias?: string  } 
  | { name: 'race_not_starts_with', alias?: string  } 
  | { name: 'race_ends_with', alias?: string  } 
  | { name: 'race_not_ends_with', alias?: string  } 
  | { name: 'profession', alias?: string  } 
  | { name: 'profession_not', alias?: string  } 
  | { name: 'profession_in', alias?: string  } 
  | { name: 'profession_not_in', alias?: string  } 
  | { name: 'profession_lt', alias?: string  } 
  | { name: 'profession_lte', alias?: string  } 
  | { name: 'profession_gt', alias?: string  } 
  | { name: 'profession_gte', alias?: string  } 
  | { name: 'profession_contains', alias?: string  } 
  | { name: 'profession_not_contains', alias?: string  } 
  | { name: 'profession_starts_with', alias?: string  } 
  | { name: 'profession_not_starts_with', alias?: string  } 
  | { name: 'profession_ends_with', alias?: string  } 
  | { name: 'profession_not_ends_with', alias?: string  } 
  | { name: 'affiliations', alias?: string  } 
  | { name: 'affiliations_not', alias?: string  } 
  | { name: 'affiliations_in', alias?: string  } 
  | { name: 'affiliations_not_in', alias?: string  } 
  | { name: 'affiliations_lt', alias?: string  } 
  | { name: 'affiliations_lte', alias?: string  } 
  | { name: 'affiliations_gt', alias?: string  } 
  | { name: 'affiliations_gte', alias?: string  } 
  | { name: 'affiliations_contains', alias?: string  } 
  | { name: 'affiliations_not_contains', alias?: string  } 
  | { name: 'affiliations_starts_with', alias?: string  } 
  | { name: 'affiliations_not_starts_with', alias?: string  } 
  | { name: 'affiliations_ends_with', alias?: string  } 
  | { name: 'affiliations_not_ends_with', alias?: string  } 
  | { name: 'region', alias?: string  } 
  | { name: 'region_not', alias?: string  } 
  | { name: 'region_in', alias?: string  } 
  | { name: 'region_not_in', alias?: string  } 
  | { name: 'region_lt', alias?: string  } 
  | { name: 'region_lte', alias?: string  } 
  | { name: 'region_gt', alias?: string  } 
  | { name: 'region_gte', alias?: string  } 
  | { name: 'region_contains', alias?: string  } 
  | { name: 'region_not_contains', alias?: string  } 
  | { name: 'region_starts_with', alias?: string  } 
  | { name: 'region_not_starts_with', alias?: string  } 
  | { name: 'region_ends_with', alias?: string  } 
  | { name: 'region_not_ends_with', alias?: string  } 
  | { name: 'gameAppearences_some', alias?: string  } 
  | { name: 'bookAppearences_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface GameWhereUniqueInput {
  id?: string | null
}
export type GameWhereUniqueInputInputObject =
  | Extract<keyof GameWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface BookWhereUniqueInput {
  id?: string | null
}
export type BookWhereUniqueInputInputObject =
  | Extract<keyof BookWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CharacterCreateInput {
  id?: string | null
  name?: string
  race?: string
  profession?: string
  affiliations?: string
  region?: string
  gameAppearences?: GameCreateManyInput | null
  bookAppearences?: BookCreateManyInput | null
}
export type CharacterCreateInputInputObject =
  | Extract<keyof CharacterCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'race', alias?: string  } 
  | { name: 'profession', alias?: string  } 
  | { name: 'affiliations', alias?: string  } 
  | { name: 'region', alias?: string  } 
  | { name: 'gameAppearences', alias?: string  } 
  | { name: 'bookAppearences', alias?: string  } 
  
export interface GameCreateManyInput {
  create?: GameCreateInput[]
  connect?: GameWhereUniqueInput[]
}
export type GameCreateManyInputInputObject =
  | Extract<keyof GameCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GameCreateInput {
  id?: string | null
  title?: string
  platforms?: GameCreateplatformsInput | null
  genres?: GameCreategenresInput | null
  releaseDate?: string
  publisher?: string
  developer?: string
  website?: string
}
export type GameCreateInputInputObject =
  | Extract<keyof GameCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'platforms', alias?: string  } 
  | { name: 'genres', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'developer', alias?: string  } 
  | { name: 'website', alias?: string  } 
  
export interface GameCreateplatformsInput {
  set?: string[]
}
export type GameCreateplatformsInputInputObject =
  | Extract<keyof GameCreateplatformsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface GameCreategenresInput {
  set?: string[]
}
export type GameCreategenresInputInputObject =
  | Extract<keyof GameCreategenresInput, string>
  | { name: 'set', alias?: string  } 
  
export interface BookCreateManyInput {
  create?: BookCreateInput[]
  connect?: BookWhereUniqueInput[]
}
export type BookCreateManyInputInputObject =
  | Extract<keyof BookCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BookCreateInput {
  id?: string | null
  title?: string
  author?: string
  publisher?: string
  publicationDate?: string
  type?: string
  pages?: number
}
export type BookCreateInputInputObject =
  | Extract<keyof BookCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publicationDate', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'pages', alias?: string  } 
  
export interface CharacterUpdateInput {
  name?: string | null
  race?: string | null
  profession?: string | null
  affiliations?: string | null
  region?: string | null
  gameAppearences?: GameUpdateManyInput | null
  bookAppearences?: BookUpdateManyInput | null
}
export type CharacterUpdateInputInputObject =
  | Extract<keyof CharacterUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'race', alias?: string  } 
  | { name: 'profession', alias?: string  } 
  | { name: 'affiliations', alias?: string  } 
  | { name: 'region', alias?: string  } 
  | { name: 'gameAppearences', alias?: string  } 
  | { name: 'bookAppearences', alias?: string  } 
  
export interface GameUpdateManyInput {
  create?: GameCreateInput[]
  update?: GameUpdateWithWhereUniqueNestedInput[]
  upsert?: GameUpsertWithWhereUniqueNestedInput[]
  delete?: GameWhereUniqueInput[]
  connect?: GameWhereUniqueInput[]
  set?: GameWhereUniqueInput[]
  disconnect?: GameWhereUniqueInput[]
  deleteMany?: GameScalarWhereInput[]
  updateMany?: GameUpdateManyWithWhereNestedInput[]
}
export type GameUpdateManyInputInputObject =
  | Extract<keyof GameUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GameUpdateWithWhereUniqueNestedInput {
  where?: GameWhereUniqueInput
  data?: GameUpdateDataInput
}
export type GameUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof GameUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GameUpdateDataInput {
  title?: string | null
  platforms?: GameUpdateplatformsInput | null
  genres?: GameUpdategenresInput | null
  releaseDate?: string | null
  publisher?: string | null
  developer?: string | null
  website?: string | null
}
export type GameUpdateDataInputInputObject =
  | Extract<keyof GameUpdateDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'platforms', alias?: string  } 
  | { name: 'genres', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'developer', alias?: string  } 
  | { name: 'website', alias?: string  } 
  
export interface GameUpdateplatformsInput {
  set?: string[]
}
export type GameUpdateplatformsInputInputObject =
  | Extract<keyof GameUpdateplatformsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface GameUpdategenresInput {
  set?: string[]
}
export type GameUpdategenresInputInputObject =
  | Extract<keyof GameUpdategenresInput, string>
  | { name: 'set', alias?: string  } 
  
export interface GameUpsertWithWhereUniqueNestedInput {
  where?: GameWhereUniqueInput
  update?: GameUpdateDataInput
  create?: GameCreateInput
}
export type GameUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof GameUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GameScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  releaseDate?: string | null
  releaseDate_not?: string | null
  releaseDate_in?: string[]
  releaseDate_not_in?: string[]
  releaseDate_lt?: string | null
  releaseDate_lte?: string | null
  releaseDate_gt?: string | null
  releaseDate_gte?: string | null
  releaseDate_contains?: string | null
  releaseDate_not_contains?: string | null
  releaseDate_starts_with?: string | null
  releaseDate_not_starts_with?: string | null
  releaseDate_ends_with?: string | null
  releaseDate_not_ends_with?: string | null
  publisher?: string | null
  publisher_not?: string | null
  publisher_in?: string[]
  publisher_not_in?: string[]
  publisher_lt?: string | null
  publisher_lte?: string | null
  publisher_gt?: string | null
  publisher_gte?: string | null
  publisher_contains?: string | null
  publisher_not_contains?: string | null
  publisher_starts_with?: string | null
  publisher_not_starts_with?: string | null
  publisher_ends_with?: string | null
  publisher_not_ends_with?: string | null
  developer?: string | null
  developer_not?: string | null
  developer_in?: string[]
  developer_not_in?: string[]
  developer_lt?: string | null
  developer_lte?: string | null
  developer_gt?: string | null
  developer_gte?: string | null
  developer_contains?: string | null
  developer_not_contains?: string | null
  developer_starts_with?: string | null
  developer_not_starts_with?: string | null
  developer_ends_with?: string | null
  developer_not_ends_with?: string | null
  website?: string | null
  website_not?: string | null
  website_in?: string[]
  website_not_in?: string[]
  website_lt?: string | null
  website_lte?: string | null
  website_gt?: string | null
  website_gte?: string | null
  website_contains?: string | null
  website_not_contains?: string | null
  website_starts_with?: string | null
  website_not_starts_with?: string | null
  website_ends_with?: string | null
  website_not_ends_with?: string | null
  AND?: GameScalarWhereInput[]
  OR?: GameScalarWhereInput[]
  NOT?: GameScalarWhereInput[]
}
export type GameScalarWhereInputInputObject =
  | Extract<keyof GameScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  | { name: 'releaseDate_not', alias?: string  } 
  | { name: 'releaseDate_in', alias?: string  } 
  | { name: 'releaseDate_not_in', alias?: string  } 
  | { name: 'releaseDate_lt', alias?: string  } 
  | { name: 'releaseDate_lte', alias?: string  } 
  | { name: 'releaseDate_gt', alias?: string  } 
  | { name: 'releaseDate_gte', alias?: string  } 
  | { name: 'releaseDate_contains', alias?: string  } 
  | { name: 'releaseDate_not_contains', alias?: string  } 
  | { name: 'releaseDate_starts_with', alias?: string  } 
  | { name: 'releaseDate_not_starts_with', alias?: string  } 
  | { name: 'releaseDate_ends_with', alias?: string  } 
  | { name: 'releaseDate_not_ends_with', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publisher_not', alias?: string  } 
  | { name: 'publisher_in', alias?: string  } 
  | { name: 'publisher_not_in', alias?: string  } 
  | { name: 'publisher_lt', alias?: string  } 
  | { name: 'publisher_lte', alias?: string  } 
  | { name: 'publisher_gt', alias?: string  } 
  | { name: 'publisher_gte', alias?: string  } 
  | { name: 'publisher_contains', alias?: string  } 
  | { name: 'publisher_not_contains', alias?: string  } 
  | { name: 'publisher_starts_with', alias?: string  } 
  | { name: 'publisher_not_starts_with', alias?: string  } 
  | { name: 'publisher_ends_with', alias?: string  } 
  | { name: 'publisher_not_ends_with', alias?: string  } 
  | { name: 'developer', alias?: string  } 
  | { name: 'developer_not', alias?: string  } 
  | { name: 'developer_in', alias?: string  } 
  | { name: 'developer_not_in', alias?: string  } 
  | { name: 'developer_lt', alias?: string  } 
  | { name: 'developer_lte', alias?: string  } 
  | { name: 'developer_gt', alias?: string  } 
  | { name: 'developer_gte', alias?: string  } 
  | { name: 'developer_contains', alias?: string  } 
  | { name: 'developer_not_contains', alias?: string  } 
  | { name: 'developer_starts_with', alias?: string  } 
  | { name: 'developer_not_starts_with', alias?: string  } 
  | { name: 'developer_ends_with', alias?: string  } 
  | { name: 'developer_not_ends_with', alias?: string  } 
  | { name: 'website', alias?: string  } 
  | { name: 'website_not', alias?: string  } 
  | { name: 'website_in', alias?: string  } 
  | { name: 'website_not_in', alias?: string  } 
  | { name: 'website_lt', alias?: string  } 
  | { name: 'website_lte', alias?: string  } 
  | { name: 'website_gt', alias?: string  } 
  | { name: 'website_gte', alias?: string  } 
  | { name: 'website_contains', alias?: string  } 
  | { name: 'website_not_contains', alias?: string  } 
  | { name: 'website_starts_with', alias?: string  } 
  | { name: 'website_not_starts_with', alias?: string  } 
  | { name: 'website_ends_with', alias?: string  } 
  | { name: 'website_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GameUpdateManyWithWhereNestedInput {
  where?: GameScalarWhereInput
  data?: GameUpdateManyDataInput
}
export type GameUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GameUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GameUpdateManyDataInput {
  title?: string | null
  platforms?: GameUpdateplatformsInput | null
  genres?: GameUpdategenresInput | null
  releaseDate?: string | null
  publisher?: string | null
  developer?: string | null
  website?: string | null
}
export type GameUpdateManyDataInputInputObject =
  | Extract<keyof GameUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'platforms', alias?: string  } 
  | { name: 'genres', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'developer', alias?: string  } 
  | { name: 'website', alias?: string  } 
  
export interface BookUpdateManyInput {
  create?: BookCreateInput[]
  update?: BookUpdateWithWhereUniqueNestedInput[]
  upsert?: BookUpsertWithWhereUniqueNestedInput[]
  delete?: BookWhereUniqueInput[]
  connect?: BookWhereUniqueInput[]
  set?: BookWhereUniqueInput[]
  disconnect?: BookWhereUniqueInput[]
  deleteMany?: BookScalarWhereInput[]
  updateMany?: BookUpdateManyWithWhereNestedInput[]
}
export type BookUpdateManyInputInputObject =
  | Extract<keyof BookUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface BookUpdateWithWhereUniqueNestedInput {
  where?: BookWhereUniqueInput
  data?: BookUpdateDataInput
}
export type BookUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof BookUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BookUpdateDataInput {
  title?: string | null
  author?: string | null
  publisher?: string | null
  publicationDate?: string | null
  type?: string | null
  pages?: number | null
}
export type BookUpdateDataInputInputObject =
  | Extract<keyof BookUpdateDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publicationDate', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'pages', alias?: string  } 
  
export interface BookUpsertWithWhereUniqueNestedInput {
  where?: BookWhereUniqueInput
  update?: BookUpdateDataInput
  create?: BookCreateInput
}
export type BookUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof BookUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BookScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  author?: string | null
  author_not?: string | null
  author_in?: string[]
  author_not_in?: string[]
  author_lt?: string | null
  author_lte?: string | null
  author_gt?: string | null
  author_gte?: string | null
  author_contains?: string | null
  author_not_contains?: string | null
  author_starts_with?: string | null
  author_not_starts_with?: string | null
  author_ends_with?: string | null
  author_not_ends_with?: string | null
  publisher?: string | null
  publisher_not?: string | null
  publisher_in?: string[]
  publisher_not_in?: string[]
  publisher_lt?: string | null
  publisher_lte?: string | null
  publisher_gt?: string | null
  publisher_gte?: string | null
  publisher_contains?: string | null
  publisher_not_contains?: string | null
  publisher_starts_with?: string | null
  publisher_not_starts_with?: string | null
  publisher_ends_with?: string | null
  publisher_not_ends_with?: string | null
  publicationDate?: string | null
  publicationDate_not?: string | null
  publicationDate_in?: string[]
  publicationDate_not_in?: string[]
  publicationDate_lt?: string | null
  publicationDate_lte?: string | null
  publicationDate_gt?: string | null
  publicationDate_gte?: string | null
  publicationDate_contains?: string | null
  publicationDate_not_contains?: string | null
  publicationDate_starts_with?: string | null
  publicationDate_not_starts_with?: string | null
  publicationDate_ends_with?: string | null
  publicationDate_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  pages?: number | null
  pages_not?: number | null
  pages_in?: number[]
  pages_not_in?: number[]
  pages_lt?: number | null
  pages_lte?: number | null
  pages_gt?: number | null
  pages_gte?: number | null
  AND?: BookScalarWhereInput[]
  OR?: BookScalarWhereInput[]
  NOT?: BookScalarWhereInput[]
}
export type BookScalarWhereInputInputObject =
  | Extract<keyof BookScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'author_not', alias?: string  } 
  | { name: 'author_in', alias?: string  } 
  | { name: 'author_not_in', alias?: string  } 
  | { name: 'author_lt', alias?: string  } 
  | { name: 'author_lte', alias?: string  } 
  | { name: 'author_gt', alias?: string  } 
  | { name: 'author_gte', alias?: string  } 
  | { name: 'author_contains', alias?: string  } 
  | { name: 'author_not_contains', alias?: string  } 
  | { name: 'author_starts_with', alias?: string  } 
  | { name: 'author_not_starts_with', alias?: string  } 
  | { name: 'author_ends_with', alias?: string  } 
  | { name: 'author_not_ends_with', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publisher_not', alias?: string  } 
  | { name: 'publisher_in', alias?: string  } 
  | { name: 'publisher_not_in', alias?: string  } 
  | { name: 'publisher_lt', alias?: string  } 
  | { name: 'publisher_lte', alias?: string  } 
  | { name: 'publisher_gt', alias?: string  } 
  | { name: 'publisher_gte', alias?: string  } 
  | { name: 'publisher_contains', alias?: string  } 
  | { name: 'publisher_not_contains', alias?: string  } 
  | { name: 'publisher_starts_with', alias?: string  } 
  | { name: 'publisher_not_starts_with', alias?: string  } 
  | { name: 'publisher_ends_with', alias?: string  } 
  | { name: 'publisher_not_ends_with', alias?: string  } 
  | { name: 'publicationDate', alias?: string  } 
  | { name: 'publicationDate_not', alias?: string  } 
  | { name: 'publicationDate_in', alias?: string  } 
  | { name: 'publicationDate_not_in', alias?: string  } 
  | { name: 'publicationDate_lt', alias?: string  } 
  | { name: 'publicationDate_lte', alias?: string  } 
  | { name: 'publicationDate_gt', alias?: string  } 
  | { name: 'publicationDate_gte', alias?: string  } 
  | { name: 'publicationDate_contains', alias?: string  } 
  | { name: 'publicationDate_not_contains', alias?: string  } 
  | { name: 'publicationDate_starts_with', alias?: string  } 
  | { name: 'publicationDate_not_starts_with', alias?: string  } 
  | { name: 'publicationDate_ends_with', alias?: string  } 
  | { name: 'publicationDate_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'pages', alias?: string  } 
  | { name: 'pages_not', alias?: string  } 
  | { name: 'pages_in', alias?: string  } 
  | { name: 'pages_not_in', alias?: string  } 
  | { name: 'pages_lt', alias?: string  } 
  | { name: 'pages_lte', alias?: string  } 
  | { name: 'pages_gt', alias?: string  } 
  | { name: 'pages_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BookUpdateManyWithWhereNestedInput {
  where?: BookScalarWhereInput
  data?: BookUpdateManyDataInput
}
export type BookUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof BookUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BookUpdateManyDataInput {
  title?: string | null
  author?: string | null
  publisher?: string | null
  publicationDate?: string | null
  type?: string | null
  pages?: number | null
}
export type BookUpdateManyDataInputInputObject =
  | Extract<keyof BookUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publicationDate', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'pages', alias?: string  } 
  
export interface CharacterUpdateManyMutationInput {
  name?: string | null
  race?: string | null
  profession?: string | null
  affiliations?: string | null
  region?: string | null
}
export type CharacterUpdateManyMutationInputInputObject =
  | Extract<keyof CharacterUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'race', alias?: string  } 
  | { name: 'profession', alias?: string  } 
  | { name: 'affiliations', alias?: string  } 
  | { name: 'region', alias?: string  } 
  
export interface GameUpdateInput {
  title?: string | null
  platforms?: GameUpdateplatformsInput | null
  genres?: GameUpdategenresInput | null
  releaseDate?: string | null
  publisher?: string | null
  developer?: string | null
  website?: string | null
}
export type GameUpdateInputInputObject =
  | Extract<keyof GameUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'platforms', alias?: string  } 
  | { name: 'genres', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'developer', alias?: string  } 
  | { name: 'website', alias?: string  } 
  
export interface GameUpdateManyMutationInput {
  title?: string | null
  platforms?: GameUpdateplatformsInput | null
  genres?: GameUpdategenresInput | null
  releaseDate?: string | null
  publisher?: string | null
  developer?: string | null
  website?: string | null
}
export type GameUpdateManyMutationInputInputObject =
  | Extract<keyof GameUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'platforms', alias?: string  } 
  | { name: 'genres', alias?: string  } 
  | { name: 'releaseDate', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'developer', alias?: string  } 
  | { name: 'website', alias?: string  } 
  
export interface BookUpdateInput {
  title?: string | null
  author?: string | null
  publisher?: string | null
  publicationDate?: string | null
  type?: string | null
  pages?: number | null
}
export type BookUpdateInputInputObject =
  | Extract<keyof BookUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publicationDate', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'pages', alias?: string  } 
  
export interface BookUpdateManyMutationInput {
  title?: string | null
  author?: string | null
  publisher?: string | null
  publicationDate?: string | null
  type?: string | null
  pages?: number | null
}
export type BookUpdateManyMutationInputInputObject =
  | Extract<keyof BookUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'publisher', alias?: string  } 
  | { name: 'publicationDate', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'pages', alias?: string  } 
  
export interface CharacterSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CharacterWhereInput | null
  AND?: CharacterSubscriptionWhereInput[]
}
export type CharacterSubscriptionWhereInputInputObject =
  | Extract<keyof CharacterSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface GameSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GameWhereInput | null
  AND?: GameSubscriptionWhereInput[]
}
export type GameSubscriptionWhereInputInputObject =
  | Extract<keyof GameSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface BookSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BookWhereInput | null
  AND?: BookSubscriptionWhereInput[]
}
export type BookSubscriptionWhereInputInputObject =
  | Extract<keyof BookSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type GameOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'releaseDate_ASC'
  | 'releaseDate_DESC'
  | 'publisher_ASC'
  | 'publisher_DESC'
  | 'developer_ASC'
  | 'developer_DESC'
  | 'website_ASC'
  | 'website_DESC'
  
export type BookOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'author_ASC'
  | 'author_DESC'
  | 'publisher_ASC'
  | 'publisher_DESC'
  | 'publicationDate_ASC'
  | 'publicationDate_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'pages_ASC'
  | 'pages_DESC'
  
export type CharacterOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'race_ASC'
  | 'race_DESC'
  | 'profession_ASC'
  | 'profession_DESC'
  | 'affiliations_ASC'
  | 'affiliations_DESC'
  | 'region_ASC'
  | 'region_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  